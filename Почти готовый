import pygame
import sys
from random import randint
import pygame as pg
import time

BLOCK_SIZE = 60
game_over = False
pygame.font.init()
font_style = pygame.font.SysFont(None, 50)
balls = []
col = 0

size = width, height = 420, 600
pygame.display.set_caption("Появление блоков после каждого хода")
all_rects = []

fps = 100
screen = pygame.display.set_mode(size)
clock = pygame.time.Clock()
move = pygame.USEREVENT
pygame.time.set_timer(move, 2)
pygame.init()
arrow = pygame.image.load("data/arrow.png")
r = arrow.get_rect()
pygame.mouse.set_visible(False)
dis = pygame.display.set_mode((width, width))

for i in range(0, height, BLOCK_SIZE):
    row = []
    for j in range(0, width, BLOCK_SIZE):
        rect = pygame.Rect(j, i, BLOCK_SIZE - 1, BLOCK_SIZE - 1)
        row.append([rect, 'black'])
    all_rects.append(row)

sc = pygame.display.set_mode((width, height))
background = pg.Surface((420, 700))

sc.blit(background, (0, 0))
pg.display.update()
x2 = 0
y2 = 0

surf = pygame.Surface((35, 35))
pygame.draw.circle(surf, 'white', (10, 10), 10)
sc.blit(surf, (0, 0))
pygame.display.update()


class Ball:
    def __init__(self, x, y, v):
        self.x = x
        self.y = y
        self.dx = -v
        self.dy = -v
        # dх отвечает за направление движение вдоль оси ох
        # нужно сделать 3 варианта dx = v/ -v/ 0
        # то есть движение вправо влево и  вертикально вверх


    def move(self, w, h):
        self.x += self.dx
        self.y += self.dy
        if self.x < 0:
            self.dx *= -1
            self.x *= -1
        if self.x > w:
            self.dx *= -1
            self.x = w - self.x % w
        if self.y < 0:
            self.dy *= -1
            self.y *= -1
        if self.y > h:
            self.dy *= -1
            self.y = h - self.y % h
        if self.y == h:
            self.dy = 0
            self.dx = 0
            self.y = h + 10
            self.x = 300



    def draw(self):
        pygame.draw.circle(screen, pygame.Color('white'),
                           (self.x, self.y), 10, 0)


def message(msg, color):
    mesg = font_style.render(msg, True, color)
    dis.blit(mesg, [width / 8, height / 2])


n = 0
while not game_over:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            sys.exit()

        # if event.type == pygame.KEYDOWN:
        #     if event.key == pygame.K_LEFT:
        #         self.dx = -1
        #     elif event.key == pygame.K_RIGHT:
        #         self.dx = 1
        #     elif event.key == pygame.K_UP or event.key == pygame.K_DOWN:
        #         self.dx = 0

        elif event.type == pygame.MOUSEMOTION:
            r.topleft = event.pos

        elif event.type == pygame.MOUSEBUTTONUP and balls == []:

            a = [event.pos[0], 500]
            balls.append(Ball(*a, 1))

        elif balls and event.type == move:
            for b in balls:
                b.move(width, height)
                x2 = b.x
                y2 = b.y
                if b.y == 590:
                    balls = []



        elif event.type == pygame.MOUSEBUTTONDOWN and balls == []:
            if event.button == 1:
                n += 1
                for i in range(3):
                    for row in all_rects:
                        for item in row:
                            rect, color = item
                            if rect.collidepoint(randint(0, 420), 58 * n):
                                if color == 'black':
                                    item[1] = (randint(0, 255), randint(0, 255), randint(0, 255))
        if n == 10:
            game_over = True
        # if x2 < 400:
        #     x2 += 0.1
        # else:
        #     x2 = 0
    screen.fill(pygame.Color("black"))



    for row in all_rects:
        for item in row:
            rect, color = item
            pygame.draw.rect(sc, color, rect)
    pygame.display.flip()
    replaced_text = ((str(r).replace('<rect(', '')).replace(')>', '')).split(", ")
    x1, y1 = int(replaced_text[0]), int(replaced_text[1])
    background.blit(sc, (x2, y2))
    sc.blit(arrow, (x1, y1))

    # sc.blit(b, (b.x, b.y))

    sc.blit(surf, (x2, y2))
    pg.display.update()
    pg.time.delay(30)
message("You lost! Game over.", 'red')
pygame.display.update()
time.sleep(3)
